/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef tutorial_TYPES_H
#define tutorial_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace tutorial {

class Stats;

typedef struct _Stats__isset {
  _Stats__isset() : hit_ratio(false), time_taken(false) {}
  bool hit_ratio :1;
  bool time_taken :1;
} _Stats__isset;

class Stats {
 public:

  Stats(const Stats&);
  Stats& operator=(const Stats&);
  Stats() : hit_ratio(0), time_taken(0) {
  }

  virtual ~Stats() throw();
  double hit_ratio;
  double time_taken;

  _Stats__isset __isset;

  void __set_hit_ratio(const double val);

  void __set_time_taken(const double val);

  bool operator == (const Stats & rhs) const
  {
    if (!(hit_ratio == rhs.hit_ratio))
      return false;
    if (!(time_taken == rhs.time_taken))
      return false;
    return true;
  }
  bool operator != (const Stats &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Stats & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Stats &a, Stats &b);

inline std::ostream& operator<<(std::ostream& out, const Stats& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
