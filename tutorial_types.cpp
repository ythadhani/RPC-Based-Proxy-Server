/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "tutorial_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace tutorial {


Stats::~Stats() throw() {
}


void Stats::__set_hit_ratio(const double val) {
  this->hit_ratio = val;
}

void Stats::__set_time_taken(const double val) {
  this->time_taken = val;
}

uint32_t Stats::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->hit_ratio);
          this->__isset.hit_ratio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->time_taken);
          this->__isset.time_taken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Stats::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Stats");

  xfer += oprot->writeFieldBegin("hit_ratio", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->hit_ratio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_taken", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->time_taken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Stats &a, Stats &b) {
  using ::std::swap;
  swap(a.hit_ratio, b.hit_ratio);
  swap(a.time_taken, b.time_taken);
  swap(a.__isset, b.__isset);
}

Stats::Stats(const Stats& other0) {
  hit_ratio = other0.hit_ratio;
  time_taken = other0.time_taken;
  __isset = other0.__isset;
}
Stats& Stats::operator=(const Stats& other1) {
  hit_ratio = other1.hit_ratio;
  time_taken = other1.time_taken;
  __isset = other1.__isset;
  return *this;
}
void Stats::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Stats(";
  out << "hit_ratio=" << to_string(hit_ratio);
  out << ", " << "time_taken=" << to_string(time_taken);
  out << ")";
}

} // namespace
